# loyalty_simulator.py
import calendar, numpy as np, pandas as pd, matplotlib.pyplot as plt, streamlit as st
from datetime import datetime
from matplotlib.ticker import FuncFormatter, StrMethodFormatter

# ─────────────────────────────────────────────────────────────────────────────
#  Core class
# ─────────────────────────────────────────────────────────────────────────────
class LoyaltyCapCalculator:
    """
    Market-Depth mode  -> Depth = k · Users^β  (k anchored at μ_u)
    Reward-Allocation  -> Deplete reserve & inflate supply day by day
    """
    def __init__(self, sand_price: float,
                 users_dist: tuple, conv_dist: tuple,
                 # Market-Depth params
                 depth_anchor_usd: float = None, beta: float = .60,
                 # Allocation params
                 sand_reserve: float=None, circulating_supply: float=None):
        self.sand_price = sand_price
        self.users_dist, self.conv_dist = users_dist, conv_dist
        self.beta = beta
        self.depth_anchor_usd = depth_anchor_usd
        self.sand_reserve = sand_reserve
        self.circulating_supply = circulating_supply

        self.mode = "depth" if depth_anchor_usd is not None else "alloc"
        if self.mode == "alloc" and (sand_reserve is None or circulating_supply is None):
            raise ValueError("Allocation mode needs reserve & supply.")

    # ── Market-Depth simulation ──────────────────────────────────────────
    def cap_market_depth(self, samples=5000):
        μ_u, σ_u = self.users_dist
        μ_c, σ_c = self.conv_dist

        users  = np.maximum(np.random.normal(μ_u, σ_u, samples), 1)         # ≥1
        points = np.maximum(np.random.normal(μ_c, σ_c, samples), 0)         # ≥0
        demand_pts = users * points

        # Kaiko depth curve
        k = self.depth_anchor_usd / (μ_u ** self.beta)
        depth_usd = k * users ** self.beta
        capacity_pts = depth_usd / self.sand_price
        capped_pts   = np.minimum(demand_pts, capacity_pts)
        per_user_cap = capped_pts / users

        return pd.DataFrame({
            "Users": users,
            "Depth_USD": depth_usd,
            "Demand_pts": demand_pts,
            "Capacity_pts": capacity_pts,
            "Capped_pts": capped_pts,
            "Cap_per_user": per_user_cap
        })

    # ── Reward-Allocation simulation ─────────────────────────────────────
    def simulate_allocation(self, days=365):
        μ_u, σ_u = self.users_dist
        μ_c, σ_c = self.conv_dist

        reserve, supply = self.sand_reserve, self.circulating_supply
        reserve_series, infl_series = [], []
        ruin = None

        for d in range(1, days+1):
            u = max(np.random.normal(μ_u, σ_u), 0)
            p = max(np.random.normal(μ_c, σ_c), 0)
            pts = u * p
            reserve = max(reserve - pts, 0)
            supply += pts
            infl_pct = (supply - self.circulating_supply)/self.circulating_supply*100
            reserve_series.append(reserve)
            infl_series.append(infl_pct)
            if ruin is None and reserve == 0: ruin = d

        return reserve_series, infl_series, ruin

# ─────────────────────────────────────────────────────────────────────────────
#  Streamlit UI
# ─────────────────────────────────────────────────────────────────────────────
st.set_page_config(page_title="Loyalty Simulator", layout="centered")
st.title("Loyalty Points • Depth-Scaling & Inflation Simulator")

mode = st.radio("Select Mode:", ["Market Depth", "Reward Allocation"])

# Shared distribution controls
st.sidebar.header("Distributions")
μ_u = st.sidebar.slider("Mean Daily Users (μ_u)", 0, 20000, 1250)
σ_u = st.sidebar.slider("Std-Dev Users (σ_u)",     0,  5000,  330)
μ_c = st.sidebar.slider("Mean Pts per User (μ_c)", 0.0, 1000.0, 34.72)
σ_c = st.sidebar.slider("Std-Dev Pts per User",    0.0,  500.0, 50.0)

# Quick PDFs
x_u = np.linspace(max(μ_u-3*σ_u,0), μ_u+3*σ_u, 180)
pdf_u = (1/(σ_u*np.sqrt(2*np.pi))) * np.exp(-0.5*((x_u-μ_u)/σ_u)**2)
x_c = np.linspace(max(μ_c-3*σ_c,0), μ_c+3*σ_c, 180)
pdf_c = (1/(σ_c*np.sqrt(2*np.pi))) * np.exp(-0.5*((x_c-μ_c)/σ_c)**2)
fig_pdf,(axu,axc)=plt.subplots(1,2,figsize=(8,3))
axu.plot(x_u,pdf_u);axu.set_title("Users PDF");axu.set_xlabel("Users")
axc.plot(x_c,pdf_c);axc.set_title("Pts/User PDF");axc.set_xlabel("Points")
st.pyplot(fig_pdf)

# ───────────────────────────────────────────────── Market-Depth Mode
if mode=="Market Depth":
    st.header("Market-Depth (Kaiko Scaling)")
    price      = st.number_input("Token Price ($)", 0.0, 100.0, 0.10)
    depth_μu   = st.number_input("Depth at μ_u Users ($)", 0.0, 1e6, 10_000.0)
    beta       = st.slider("β   (elasticity)", 0.3, 1.0, 0.60, 0.05)
    samples    = st.slider("Monte-Carlo samples", 500, 20000, 5000, 500)

    if st.button("Run Depth Simulation"):
        calc = LoyaltyCapCalculator(
            sand_price=price,
            users_dist=(μ_u,σ_u),
            conv_dist=(μ_c,σ_c),
            depth_anchor_usd=depth_μu,
            beta=beta
        )
        df = calc.cap_market_depth(samples)

        st.subheader("Key stats")
        st.metric("Mean Depth (USD)",     f"{df['Depth_USD'].mean():,.0f}")
        st.metric("Mean Demand (pts)",    f"{df['Demand_pts'].mean():,.0f}")
        st.metric("Mean Capacity (pts)",  f"{df['Capacity_pts'].mean():,.0f}")
        st.metric("Mean Cap/User",        f"{df['Cap_per_user'].mean():.1f}")

        # Percentiles table
        pct_df = df[["Depth_USD","Cap_per_user"]].quantile([.1,.5,.9]).T
        pct_df.columns = ["P10","Median","P90"]
        st.dataframe(pct_df.style.format("{:,.0f}"))

        # Plot 1 : Demand vs Capped
        fig1,ax1=plt.subplots()
        ax1.hist(df["Demand_pts"],bins=40,alpha=.5,label="Demand")
        ax1.hist(df["Capped_pts"],bins=40,alpha=.5,label="Capped")
        ax1.axvline(depth_μu/price,color="red",ls="--",label="Anchor cap")
        ax1.set_xlabel("Points"); ax1.set_title("Demand vs Capped")
        ax1.legend(); st.pyplot(fig1)

        # Plot 2 : Depth vs Users
        fig2,ax2=plt.subplots()
        ax2.scatter(df["Users"],df["Depth_USD"],s=8,alpha=.4)
        ax2.set_xlabel("Users"); ax2.set_ylabel("Depth (USD)")
        ax2.set_title("Depth = k·Users^β")
        ax2.yaxis.set_major_formatter(FuncFormatter(lambda x,_:f"${x:,.0f}"))
        ax2.xaxis.set_major_formatter(StrMethodFormatter("{x:,.0f}"))
        ax2.grid(True,ls=":")
        st.pyplot(fig2)

        # Plot 3 : Cap per user distribution
        fig3,ax3=plt.subplots()
        ax3.hist(df["Cap_per_user"],bins=40,color="tab:green",alpha=0.6)
        ax3.set_xlabel("Cap per User (MRT/day)")
        ax3.set_title("Distribution of Cap per User")
        ax3.xaxis.set_major_formatter(StrMethodFormatter("{x:,.0f}"))
        st.pyplot(fig3)

# ───────────────────────────────────────────────── Reward-Allocation Mode
else:
    st.header("Reward-Allocation Mode")
    price  = st.number_input("Token Price ($)", 0.0, 100.0, 0.10)
    reserve0 = st.number_input("Initial Reserve (pts)", 0.0, 1e9, 1e7)
    supply0  = st.number_input("Circulating Supply (pts)", 0.0, 1e12, 5e8)
    days_sim = st.slider("Simulation horizon (days)", 30, 1460, 365)

    if st.button("Run Allocation Simulation"):
        calc = LoyaltyCapCalculator(
            sand_price=price,
            users_dist=(μ_u,σ_u),
            conv_dist=(μ_c,σ_c),
            sand_reserve=reserve0,
            circulating_supply=supply0
        )
        reserve_series,infl_series,ruin = calc.simulate_allocation(days_sim)

        st.metric("Reserve after sim", f"{reserve_series[-1]:,.0f} pts")
        st.metric("Inflation",         f"{infl_series[-1]:.2f}%")

        figR,axR=plt.subplots(); axR.plot(reserve_series); axR.set_title("Reserve"); st.pyplot(figR)
        figI,axI=plt.subplots(); axI.plot(infl_series);   axI.set_title("Inflation %"); st.pyplot(figI)

        if ruin: st.warning(f"Reserve depleted day {ruin}")
        else:    st.success("Reserve never hit zero")

st.caption("β≈0.6: empirical Kaiko elasticity.  Adjust anchor depth to match your Tier-1 benchmark.")
